#lang racket
(provide klein/euclid-output
         klein/circ-prime-output
         klein/factors-output
         klein/farey-output
         klein/fib-output
         klein/horner-output
         klein/horner-param-output
         klein/lib-output
         klein/sieve-output)

(define klein/euclid-output '("<identifier> remainder"
  "<punctuation> ("
  "<identifier> a"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> b"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> a"
  "<operator> <"
  "<identifier> b"
  "<keyword> then"
  "<identifier> a"
  "<keyword> else"
  "<identifier> remainder"
  "<punctuation> ("
  "<identifier> a"
  "<operator> -"
  "<identifier> b"
  "<separator> ,"
  "<identifier> b"
  "<punctuation> )"
  "<keyword> endif"
  "<identifier> gcd"
  "<punctuation> ("
  "<identifier> a"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> b"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> b"
  "<operator> ="
  "<integer> 0"
  "<keyword> then"
  "<identifier> a"
  "<keyword> else"
  "<identifier> gcd"
  "<punctuation> ("
  "<identifier> b"
  "<separator> ,"
  "<identifier> remainder"
  "<punctuation> ("
  "<identifier> a"
  "<separator> ,"
  "<identifier> b"
  "<punctuation> )"
  "<punctuation> )"
  "<keyword> endif"
  "<keyword> main"
  "<punctuation> ("
  "<identifier> a"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> b"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> gcd"
  "<punctuation> ("
  "<identifier> a"
  "<separator> ,"
  "<identifier> b"
  "<punctuation> )"))

(define klein/circ-prime-output '("<keyword> main"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> circularPrimesTo"
  "<punctuation> ("
  "<identifier> x"
  "<punctuation> )"
  "<identifier> circularPrimesTo"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> circularPrimesToHelper"
  "<punctuation> ("
  "<identifier> x"
  "<operator> +"
  "<integer> 1"
  "<separator> ,"
  "<integer> 2"
  "<separator> ,"
  "<integer> 0"
  "<punctuation> )"
  "<identifier> circularPrimesToHelper"
  "<punctuation> ("
  "<identifier> top"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> count"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> x"
  "<operator> <"
  "<identifier> top"
  "<keyword> then"
  "<keyword> if"
  "<identifier> isCircularPrime"
  "<punctuation> ("
  "<identifier> x"
  "<punctuation> )"
  "<keyword> then"
  "<identifier> circularPrimesToHelper"
  "<punctuation> ("
  "<identifier> top"
  "<separator> ,"
  "<identifier> x"
  "<operator> +"
  "<integer> 1"
  "<separator> ,"
  "<identifier> count"
  "<operator> +"
  "<integer> 1"
  "<punctuation> )"
  "<keyword> else"
  "<identifier> circularPrimesToHelper"
  "<punctuation> ("
  "<identifier> top"
  "<separator> ,"
  "<identifier> x"
  "<operator> +"
  "<integer> 1"
  "<separator> ,"
  "<identifier> count"
  "<punctuation> )"
  "<keyword> endif"
  "<keyword> else"
  "<identifier> count"
  "<keyword> endif"
  "<identifier> isCircularPrime"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> if"
  "<identifier> isCircularPrimeHelper"
  "<punctuation> ("
  "<identifier> x"
  "<separator> ,"
  "<identifier> log10"
  "<punctuation> ("
  "<identifier> x"
  "<punctuation> )"
  "<operator> +"
  "<integer> 1"
  "<punctuation> )"
  "<keyword> then"
  "<identifier> report"
  "<punctuation> ("
  "<identifier> x"
  "<punctuation> )"
  "<keyword> else"
  "<keyword> false"
  "<keyword> endif"
  "<identifier> isCircularPrimeHelper"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> turns"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> if"
  "<identifier> turns"
  "<operator> ="
  "<integer> 0"
  "<keyword> then"
  "<keyword> true"
  "<keyword> else"
  "<keyword> and"
  "<punctuation> ("
  "<identifier> isPrime"
  "<punctuation> ("
  "<identifier> x"
  "<punctuation> )"
  "<separator> ,"
  "<identifier> isCircularPrimeHelper"
  "<punctuation> ("
  "<identifier> rotate"
  "<punctuation> ("
  "<identifier> x"
  "<punctuation> )"
  "<separator> ,"
  "<identifier> turns"
  "<operator> -"
  "<integer> 1"
  "<punctuation> )"
  "<punctuation> )"
  "<keyword> endif"
  "<identifier> report"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> print"
  "<punctuation> ("
  "<identifier> x"
  "<punctuation> )"
  "<keyword> true"
  "<keyword> and"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> boolean"
  "<separator> ,"
  "<identifier> y"
  "<separator> :"
  "<keyword> boolean"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> if"
  "<identifier> x"
  "<keyword> then"
  "<identifier> y"
  "<keyword> else"
  "<keyword> false"
  "<keyword> endif"
  "<identifier> rotate"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> add"
  "<punctuation> ("
  "<identifier> x"
  "<operator> /"
  "<integer> 10"
  "<separator> ,"
  "<identifier> mod"
  "<punctuation> ("
  "<identifier> x"
  "<separator> ,"
  "<integer> 10"
  "<punctuation> )"
  "<operator> *"
  "<identifier> pow"
  "<punctuation> ("
  "<integer> 10"
  "<separator> ,"
  "<identifier> log10"
  "<punctuation> ("
  "<identifier> x"
  "<punctuation> )"
  "<punctuation> )"
  "<punctuation> )"
  "<identifier> pow"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> y"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> powHelper"
  "<punctuation> ("
  "<identifier> x"
  "<separator> ,"
  "<identifier> y"
  "<separator> ,"
  "<identifier> x"
  "<punctuation> )"
  "<identifier> powHelper"
  "<punctuation> ("
  "<identifier> base"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> power"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> total"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> power"
  "<operator> ="
  "<integer> 0"
  "<keyword> then"
  "<integer> 1"
  "<keyword> else"
  "<keyword> if"
  "<identifier> power"
  "<operator> ="
  "<integer> 1"
  "<keyword> then"
  "<identifier> total"
  "<keyword> else"
  "<identifier> powHelper"
  "<punctuation> ("
  "<identifier> base"
  "<separator> ,"
  "<identifier> power"
  "<operator> -"
  "<integer> 1"
  "<separator> ,"
  "<identifier> base"
  "<operator> *"
  "<identifier> total"
  "<punctuation> )"
  "<keyword> endif"
  "<keyword> endif"
  "<identifier> log10"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> log10Helper"
  "<punctuation> ("
  "<identifier> x"
  "<separator> ,"
  "<integer> 0"
  "<punctuation> )"
  "<identifier> log10Helper"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> y"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> div"
  "<punctuation> ("
  "<identifier> x"
  "<separator> ,"
  "<integer> 10"
  "<punctuation> )"
  "<operator> ="
  "<integer> 0"
  "<keyword> then"
  "<identifier> y"
  "<keyword> else"
  "<identifier> log10Helper"
  "<punctuation> ("
  "<identifier> x"
  "<operator> /"
  "<integer> 10"
  "<separator> ,"
  "<identifier> y"
  "<operator> +"
  "<integer> 1"
  "<punctuation> )"
  "<keyword> endif"
  "<identifier> add"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> y"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> x"
  "<operator> +"
  "<identifier> y"
  "<identifier> div"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> y"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> x"
  "<operator> /"
  "<identifier> y"
  "<identifier> isPrime"
  "<punctuation> ("
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> not"
  "<identifier> hasDivisorFrom"
  "<punctuation> ("
  "<integer> 2"
  "<separator> ,"
  "<identifier> n"
  "<punctuation> )"
  "<identifier> hasDivisorFrom"
  "<punctuation> ("
  "<identifier> i"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> if"
  "<identifier> i"
  "<operator> <"
  "<identifier> n"
  "<keyword> then"
  "<identifier> divides"
  "<punctuation> ("
  "<identifier> i"
  "<separator> ,"
  "<identifier> n"
  "<punctuation> )"
  "<keyword> or"
  "<identifier> hasDivisorFrom"
  "<punctuation> ("
  "<identifier> i"
  "<operator> +"
  "<integer> 1"
  "<separator> ,"
  "<identifier> n"
  "<punctuation> )"
  "<keyword> else"
  "<keyword> false"
  "<keyword> endif"
  "<identifier> divides"
  "<punctuation> ("
  "<identifier> a"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> b"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<identifier> mod"
  "<punctuation> ("
  "<identifier> b"
  "<separator> ,"
  "<identifier> a"
  "<punctuation> )"
  "<operator> ="
  "<integer> 0"
  "<identifier> mod"
  "<punctuation> ("
  "<identifier> num"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> den"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> num"
  "<operator> <"
  "<identifier> den"
  "<keyword> then"
  "<identifier> num"
  "<keyword> else"
  "<identifier> mod"
  "<punctuation> ("
  "<identifier> num"
  "<operator> -"
  "<identifier> den"
  "<separator> ,"
  "<identifier> den"
  "<punctuation> )"
  "<keyword> endif"))

(define klein/factors-output '("<keyword> main"
  "<punctuation> ("
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> loopToN"
  "<punctuation> ("
  "<identifier> n"
  "<separator> ,"
  "<integer> 1"
  "<punctuation> )"
  "<identifier> loopToN"
  "<punctuation> ("
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> current"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> n"
  "<operator> ="
  "<identifier> current"
  "<keyword> then"
  "<identifier> n"
  "<keyword> else"
  "<identifier> testAndLoop"
  "<punctuation> ("
  "<identifier> n"
  "<separator> ,"
  "<identifier> current"
  "<punctuation> )"
  "<keyword> endif"
  "<identifier> testAndLoop"
  "<punctuation> ("
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> current"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> divides"
  "<punctuation> ("
  "<identifier> current"
  "<separator> ,"
  "<identifier> n"
  "<punctuation> )"
  "<keyword> then"
  "<identifier> printAndLoop"
  "<punctuation> ("
  "<identifier> n"
  "<separator> ,"
  "<identifier> current"
  "<punctuation> )"
  "<keyword> else"
  "<identifier> loopToN"
  "<punctuation> ("
  "<identifier> n"
  "<separator> ,"
  "<identifier> current"
  "<operator> +"
  "<integer> 1"
  "<punctuation> )"
  "<keyword> endif"
  "<identifier> printAndLoop"
  "<punctuation> ("
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> current"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> print"
  "<punctuation> ("
  "<identifier> current"
  "<punctuation> )"
  "<identifier> loopToN"
  "<punctuation> ("
  "<identifier> n"
  "<separator> ,"
  "<identifier> current"
  "<operator> +"
  "<integer> 1"
  "<punctuation> )"
  "<identifier> divides"
  "<punctuation> ("
  "<identifier> a"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> b"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<identifier> remainder"
  "<punctuation> ("
  "<identifier> b"
  "<separator> ,"
  "<identifier> a"
  "<punctuation> )"
  "<operator> ="
  "<integer> 0"
  "<identifier> remainder"
  "<punctuation> ("
  "<identifier> num"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> den"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> num"
  "<operator> <"
  "<identifier> den"
  "<keyword> then"
  "<identifier> num"
  "<keyword> else"
  "<identifier> remainder"
  "<punctuation> ("
  "<identifier> num"
  "<operator> -"
  "<identifier> den"
  "<separator> ,"
  "<identifier> den"
  "<punctuation> )"
  "<keyword> endif"))

(define klein/farey-output '("<keyword> main"
  "<punctuation> ("
  "<identifier> xNum"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> N"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> print"
  "<punctuation> ("
  "<identifier> fareyNum"
  "<punctuation> ("
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> N"
  "<punctuation> )"
  "<punctuation> )"
  "<identifier> fareyDen"
  "<punctuation> ("
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> N"
  "<punctuation> )"
  "<identifier> fareyNum"
  "<punctuation> ("
  "<identifier> xNum"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> N"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> fareySelectNum"
  "<punctuation> ("
  "<identifier> N"
  "<separator> ,"
  "<identifier> whileLoopFor"
  "<punctuation> ("
  "<integer> 1"
  "<separator> ,"
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> N"
  "<separator> ,"
  "<integer> 0"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<punctuation> )"
  "<separator> ,"
  "<identifier> whileLoopFor"
  "<punctuation> ("
  "<integer> 2"
  "<separator> ,"
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> N"
  "<separator> ,"
  "<integer> 0"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<punctuation> )"
  "<separator> ,"
  "<identifier> whileLoopFor"
  "<punctuation> ("
  "<integer> 3"
  "<separator> ,"
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> N"
  "<separator> ,"
  "<integer> 0"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<punctuation> )"
  "<separator> ,"
  "<identifier> whileLoopFor"
  "<punctuation> ("
  "<integer> 4"
  "<separator> ,"
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> N"
  "<separator> ,"
  "<integer> 0"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<punctuation> )"
  "<punctuation> )"
  "<identifier> fareyDen"
  "<punctuation> ("
  "<identifier> xNum"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> N"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> fareySelectDen"
  "<punctuation> ("
  "<identifier> N"
  "<separator> ,"
  "<identifier> whileLoopFor"
  "<punctuation> ("
  "<integer> 1"
  "<separator> ,"
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> N"
  "<separator> ,"
  "<integer> 0"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<punctuation> )"
  "<separator> ,"
  "<identifier> whileLoopFor"
  "<punctuation> ("
  "<integer> 2"
  "<separator> ,"
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> N"
  "<separator> ,"
  "<integer> 0"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<punctuation> )"
  "<separator> ,"
  "<identifier> whileLoopFor"
  "<punctuation> ("
  "<integer> 3"
  "<separator> ,"
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> N"
  "<separator> ,"
  "<integer> 0"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<punctuation> )"
  "<separator> ,"
  "<identifier> whileLoopFor"
  "<punctuation> ("
  "<integer> 4"
  "<separator> ,"
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> N"
  "<separator> ,"
  "<integer> 0"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<separator> ,"
  "<integer> 1"
  "<punctuation> )"
  "<punctuation> )"
  "<identifier> fareySelectNum"
  "<punctuation> ("
  "<identifier> N"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> a"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> b"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> c"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> d"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> greater"
  "<punctuation> ("
  "<identifier> b"
  "<separator> ,"
  "<identifier> N"
  "<punctuation> )"
  "<keyword> then"
  "<identifier> c"
  "<keyword> else"
  "<identifier> a"
  "<keyword> endif"
  "<identifier> fareySelectDen"
  "<punctuation> ("
  "<identifier> N"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> a"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> b"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> c"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> d"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> greater"
  "<punctuation> ("
  "<identifier> b"
  "<separator> ,"
  "<identifier> N"
  "<punctuation> )"
  "<keyword> then"
  "<identifier> d"
  "<keyword> else"
  "<identifier> b"
  "<keyword> endif"
  "<identifier> whileLoopFor"
  "<punctuation> ("
  "<identifier> selector"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> xNum"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> N"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> a"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> b"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> c"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> d"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> greater"
  "<punctuation> ("
  "<identifier> b"
  "<separator> ,"
  "<identifier> N"
  "<punctuation> )"
  "<keyword> or"
  "<identifier> greater"
  "<punctuation> ("
  "<identifier> d"
  "<separator> ,"
  "<identifier> N"
  "<punctuation> )"
  "<keyword> then"
  "<keyword> if"
  "<identifier> selector"
  "<operator> ="
  "<integer> 1"
  "<keyword> then"
  "<identifier> a"
  "<keyword> else"
  "<keyword> if"
  "<identifier> selector"
  "<operator> ="
  "<integer> 2"
  "<keyword> then"
  "<identifier> b"
  "<keyword> else"
  "<keyword> if"
  "<identifier> selector"
  "<operator> ="
  "<integer> 3"
  "<keyword> then"
  "<identifier> c"
  "<keyword> else"
  "<identifier> d"
  "<keyword> endif"
  "<keyword> endif"
  "<keyword> endif"
  "<keyword> else"
  "<keyword> if"
  "<identifier> fractionEqual"
  "<punctuation> ("
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> a"
  "<operator> +"
  "<identifier> c"
  "<separator> ,"
  "<identifier> b"
  "<operator> +"
  "<identifier> d"
  "<punctuation> )"
  "<keyword> then"
  "<keyword> if"
  "<identifier> selector"
  "<operator> ="
  "<integer> 1"
  "<keyword> then"
  "<identifier> a"
  "<operator> +"
  "<identifier> c"
  "<keyword> else"
  "<keyword> if"
  "<identifier> selector"
  "<operator> ="
  "<integer> 2"
  "<keyword> then"
  "<identifier> b"
  "<operator> +"
  "<identifier> d"
  "<keyword> else"
  "<keyword> if"
  "<identifier> selector"
  "<operator> ="
  "<integer> 3"
  "<keyword> then"
  "<identifier> a"
  "<operator> +"
  "<identifier> c"
  "<keyword> else"
  "<identifier> b"
  "<operator> +"
  "<identifier> d"
  "<keyword> endif"
  "<keyword> endif"
  "<keyword> endif"
  "<keyword> else"
  "<keyword> if"
  "<identifier> fractionGreater"
  "<punctuation> ("
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> a"
  "<operator> +"
  "<identifier> c"
  "<separator> ,"
  "<identifier> b"
  "<operator> +"
  "<identifier> d"
  "<punctuation> )"
  "<keyword> then"
  "<identifier> whileLoopFor"
  "<punctuation> ("
  "<identifier> selector"
  "<separator> ,"
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> N"
  "<separator> ,"
  "<identifier> a"
  "<operator> +"
  "<identifier> c"
  "<separator> ,"
  "<identifier> b"
  "<operator> +"
  "<identifier> d"
  "<separator> ,"
  "<identifier> c"
  "<separator> ,"
  "<identifier> d"
  "<punctuation> )"
  "<keyword> else"
  "<identifier> whileLoopFor"
  "<punctuation> ("
  "<identifier> selector"
  "<separator> ,"
  "<identifier> xNum"
  "<separator> ,"
  "<identifier> xDen"
  "<separator> ,"
  "<identifier> N"
  "<separator> ,"
  "<identifier> a"
  "<separator> ,"
  "<identifier> b"
  "<separator> ,"
  "<identifier> a"
  "<operator> +"
  "<identifier> c"
  "<separator> ,"
  "<identifier> b"
  "<operator> +"
  "<identifier> d"
  "<punctuation> )"
  "<keyword> endif"
  "<keyword> endif"
  "<keyword> endif"
  "<identifier> fractionEqual"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> xd"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> y"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> yd"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<identifier> x"
  "<operator> *"
  "<identifier> yd"
  "<operator> ="
  "<identifier> y"
  "<operator> *"
  "<identifier> xd"
  "<identifier> fractionGreater"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> xd"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> y"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> yd"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<identifier> greater"
  "<punctuation> ("
  "<identifier> x"
  "<operator> *"
  "<identifier> yd"
  "<separator> ,"
  "<identifier> y"
  "<operator> *"
  "<identifier> xd"
  "<punctuation> )"
  "<identifier> greater"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> y"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> if"
  "<identifier> x"
  "<operator> <"
  "<identifier> y"
  "<keyword> or"
  "<identifier> x"
  "<operator> ="
  "<identifier> y"
  "<keyword> then"
  "<keyword> false"
  "<keyword> else"
  "<keyword> true"
  "<keyword> endif"))

(define klein/fib-output '("<keyword> main"
  "<punctuation> ("
  "<identifier> elementWanted"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> elementWanted"
  "<operator> <"
  "<integer> 1"
  "<keyword> then"
  "<integer> 0"
  "<keyword> else"
  "<identifier> addNext"
  "<punctuation> ("
  "<integer> 1"
  "<separator> ,"
  "<identifier> elementWanted"
  "<separator> ,"
  "<integer> 0"
  "<separator> ,"
  "<integer> 1"
  "<punctuation> )"
  "<keyword> endif"
  "<identifier> addNext"
  "<punctuation> ("
  "<identifier> currentElement"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> elementWanted"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> previousSum"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> currentSum"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> elementWanted"
  "<operator> ="
  "<identifier> currentNumber"
  "<keyword> then"
  "<identifier> currentSum"
  "<keyword> else"
  "<identifier> addNext"
  "<punctuation> ("
  "<identifier> currentNumber"
  "<operator> +"
  "<integer> 1"
  "<separator> ,"
  "<identifier> elementWanted"
  "<separator> ,"
  "<identifier> currentSum"
  "<separator> ,"
  "<identifier> previousSum"
  "<operator> +"
  "<identifier> currentSum"
  "<punctuation> )"
  "<keyword> endif"))

(define klein/horner-output '("<keyword> main"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> horner"
  "<punctuation> ("
  "<identifier> x"
  "<separator> ,"
  "<integer> 3"
  "<separator> ,"
  "<integer> 0"
  "<punctuation> )"
  "<identifier> horner"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> value"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> n"
  "<operator> <"
  "<integer> 0"
  "<keyword> then"
  "<identifier> value"
  "<keyword> else"
  "<identifier> horner"
  "<punctuation> ("
  "<identifier> x"
  "<separator> ,"
  "<identifier> n"
  "<operator> -"
  "<integer> 1"
  "<separator> ,"
  "<identifier> TIMES"
  "<punctuation> ("
  "<identifier> value"
  "<separator> ,"
  "<identifier> x"
  "<punctuation> )"
  "<operator> +"
  "<identifier> coefficient"
  "<punctuation> ("
  "<identifier> n"
  "<punctuation> )"
  "<punctuation> )"
  "<keyword> endif"
  "<identifier> coefficient"
  "<punctuation> ("
  "<identifier> i"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> i"
  "<operator> <"
  "<integer> 1"
  "<keyword> then"
  "<integer> 9"
  "<keyword> else"
  "<keyword> if"
  "<identifier> i"
  "<operator> <"
  "<integer> 2"
  "<keyword> then"
  "<integer> 2"
  "<keyword> else"
  "<keyword> if"
  "<identifier> i"
  "<operator> <"
  "<integer> 3"
  "<keyword> then"
  "<identifier> NEG"
  "<punctuation> ("
  "<integer> 4"
  "<punctuation> )"
  "<keyword> else"
  "<integer> 1"
  "<keyword> endif"
  "<keyword> endif"
  "<keyword> endif"
  "<identifier> NEG"
  "<punctuation> ("
  "<identifier> i"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<integer> 0"
  "<operator> -"
  "<identifier> i"
  "<identifier> TIMES"
  "<punctuation> ("
  "<identifier> i"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> k"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> i"
  "<operator> *"
  "<identifier> k"))

(define klein/horner-param-output '("<keyword> main"
  "<punctuation> ("
  "<identifier> coeff3"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> coeff2"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> coeff1"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> coeff0"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> horner"
  "<punctuation> ("
  "<identifier> x"
  "<separator> ,"
  "<integer> 3"
  "<separator> ,"
  "<integer> 0"
  "<separator> ,"
  "<identifier> coeff3"
  "<separator> ,"
  "<identifier> coeff2"
  "<separator> ,"
  "<identifier> coeff1"
  "<separator> ,"
  "<identifier> coeff0"
  "<punctuation> )"
  "<identifier> horner"
  "<punctuation> ("
  "<identifier> x"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> value"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> coeff3"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> coeff2"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> coeff1"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> coeff0"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> n"
  "<operator> <"
  "<integer> 0"
  "<keyword> then"
  "<identifier> value"
  "<keyword> else"
  "<identifier> horner"
  "<punctuation> ("
  "<identifier> x"
  "<separator> ,"
  "<identifier> n"
  "<operator> -"
  "<integer> 1"
  "<separator> ,"
  "<identifier> TIMES"
  "<punctuation> ("
  "<identifier> value"
  "<separator> ,"
  "<identifier> x"
  "<punctuation> )"
  "<operator> +"
  "<identifier> coefficient"
  "<punctuation> ("
  "<identifier> n"
  "<separator> ,"
  "<identifier> coeff3"
  "<separator> ,"
  "<identifier> coeff2"
  "<separator> ,"
  "<identifier> coeff1"
  "<separator> ,"
  "<identifier> coeff0"
  "<punctuation> )"
  "<separator> ,"
  "<identifier> coeff3"
  "<separator> ,"
  "<identifier> coeff2"
  "<separator> ,"
  "<identifier> coeff1"
  "<separator> ,"
  "<identifier> coeff0"
  "<punctuation> )"
  "<keyword> endif"
  "<identifier> coefficient"
  "<punctuation> ("
  "<identifier> i"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> coeff3"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> coeff2"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> coeff1"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> coeff0"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> i"
  "<operator> <"
  "<integer> 1"
  "<keyword> then"
  "<identifier> coeff0"
  "<keyword> else"
  "<keyword> if"
  "<identifier> i"
  "<operator> <"
  "<integer> 2"
  "<keyword> then"
  "<identifier> coeff1"
  "<keyword> else"
  "<keyword> if"
  "<identifier> i"
  "<operator> <"
  "<integer> 3"
  "<keyword> then"
  "<identifier> coeff2"
  "<keyword> else"
  "<identifier> coeff3"
  "<keyword> endif"
  "<keyword> endif"
  "<keyword> endif"
  "<identifier> NEG"
  "<punctuation> ("
  "<identifier> i"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<integer> 0"
  "<operator> -"
  "<identifier> i"
  "<identifier> TIMES"
  "<punctuation> ("
  "<identifier> i"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> k"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> i"
  "<operator> *"
  "<identifier> k"))

(define klein/lib-output '("<keyword> main"
  "<punctuation> ("
  "<identifier> testArgument"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> print"
  "<punctuation> ("
  "<identifier> SQRT"
  "<punctuation> ("
  "<identifier> testArgument"
  "<punctuation> )"
  "<punctuation> )"
  "<identifier> ODD"
  "<punctuation> ("
  "<identifier> testArgument"
  "<punctuation> )"
  "<identifier> AND"
  "<punctuation> ("
  "<identifier> p"
  "<separator> :"
  "<keyword> boolean"
  "<separator> ,"
  "<identifier> q"
  "<separator> :"
  "<keyword> boolean"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> if"
  "<identifier> p"
  "<keyword> then"
  "<identifier> q"
  "<keyword> else"
  "<keyword> false"
  "<keyword> endif"
  "<identifier> LT"
  "<punctuation> ("
  "<identifier> p"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> q"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<identifier> p"
  "<operator> <"
  "<identifier> q"
  "<identifier> EQ"
  "<punctuation> ("
  "<identifier> p"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> q"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<identifier> p"
  "<operator> ="
  "<identifier> q"
  "<identifier> LE"
  "<punctuation> ("
  "<identifier> p"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> q"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<identifier> LT"
  "<punctuation> ("
  "<identifier> p"
  "<separator> ,"
  "<identifier> q"
  "<punctuation> )"
  "<keyword> or"
  "<identifier> EQ"
  "<punctuation> ("
  "<identifier> p"
  "<separator> ,"
  "<identifier> q"
  "<punctuation> )"
  "<identifier> GE"
  "<punctuation> ("
  "<identifier> p"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> q"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> not"
  "<identifier> LT"
  "<punctuation> ("
  "<identifier> p"
  "<separator> ,"
  "<identifier> q"
  "<punctuation> )"
  "<identifier> GT"
  "<punctuation> ("
  "<identifier> p"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> q"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> not"
  "<identifier> LE"
  "<punctuation> ("
  "<identifier> p"
  "<separator> ,"
  "<identifier> q"
  "<punctuation> )"
  "<identifier> PLUS"
  "<punctuation> ("
  "<identifier> p"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> q"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> p"
  "<operator> +"
  "<identifier> q"
  "<identifier> MINUS"
  "<punctuation> ("
  "<identifier> p"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> q"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> p"
  "<operator> -"
  "<identifier> q"
  "<identifier> TIMES"
  "<punctuation> ("
  "<identifier> p"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> q"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> p"
  "<operator> *"
  "<identifier> q"
  "<identifier> DIV"
  "<punctuation> ("
  "<identifier> p"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> q"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> p"
  "<operator> /"
  "<identifier> q"
  "<identifier> NEG"
  "<punctuation> ("
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<integer> 0"
  "<operator> -"
  "<identifier> n"
  "<identifier> ABS"
  "<punctuation> ("
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<integer> 0"
  "<operator> <"
  "<identifier> n"
  "<keyword> then"
  "<identifier> n"
  "<keyword> else"
  "<identifier> NEG"
  "<punctuation> ("
  "<identifier> n"
  "<punctuation> )"
  "<keyword> endif"
  "<identifier> ODD"
  "<punctuation> ("
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> if"
  "<identifier> LE"
  "<punctuation> ("
  "<integer> 0"
  "<separator> ,"
  "<identifier> n"
  "<punctuation> )"
  "<keyword> then"
  "<identifier> GT"
  "<punctuation> ("
  "<identifier> n"
  "<separator> ,"
  "<identifier> DIV"
  "<punctuation> ("
  "<identifier> n"
  "<separator> ,"
  "<integer> 2"
  "<punctuation> )"
  "<operator> +"
  "<identifier> DIV"
  "<punctuation> ("
  "<identifier> n"
  "<separator> ,"
  "<integer> 2"
  "<punctuation> )"
  "<punctuation> )"
  "<keyword> else"
  "<identifier> GT"
  "<punctuation> ("
  "<identifier> NEG"
  "<punctuation> ("
  "<identifier> n"
  "<punctuation> )"
  "<separator> ,"
  "<identifier> DIV"
  "<punctuation> ("
  "<identifier> NEG"
  "<punctuation> ("
  "<identifier> n"
  "<punctuation> )"
  "<separator> ,"
  "<integer> 2"
  "<punctuation> )"
  "<operator> +"
  "<identifier> DIV"
  "<punctuation> ("
  "<identifier> NEG"
  "<punctuation> ("
  "<identifier> n"
  "<punctuation> )"
  "<separator> ,"
  "<integer> 2"
  "<punctuation> )"
  "<punctuation> )"
  "<keyword> endif"
  "<identifier> SQRT"
  "<punctuation> ("
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<identifier> SQRTSEARCH"
  "<punctuation> ("
  "<identifier> n"
  "<separator> ,"
  "<integer> 0"
  "<separator> ,"
  "<identifier> n"
  "<punctuation> )"
  "<identifier> SQRTSEARCH"
  "<punctuation> ("
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> low"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> high"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> LE"
  "<punctuation> ("
  "<identifier> high"
  "<separator> ,"
  "<identifier> low"
  "<operator> +"
  "<integer> 1"
  "<punctuation> )"
  "<keyword> then"
  "<keyword> if"
  "<identifier> LE"
  "<punctuation> ("
  "<identifier> n"
  "<operator> -"
  "<identifier> TIMES"
  "<punctuation> ("
  "<identifier> low"
  "<separator> ,"
  "<identifier> low"
  "<punctuation> )"
  "<separator> ,"
  "<identifier> TIMES"
  "<punctuation> ("
  "<identifier> high"
  "<separator> ,"
  "<identifier> high"
  "<punctuation> )"
  "<operator> -"
  "<identifier> n"
  "<punctuation> )"
  "<keyword> then"
  "<identifier> low"
  "<keyword> else"
  "<identifier> high"
  "<keyword> endif"
  "<keyword> else"
  "<identifier> SQRTSPLIT"
  "<punctuation> ("
  "<identifier> n"
  "<separator> ,"
  "<identifier> low"
  "<separator> ,"
  "<identifier> high"
  "<separator> ,"
  "<identifier> PLUS"
  "<punctuation> ("
  "<identifier> low"
  "<separator> ,"
  "<identifier> high"
  "<punctuation> )"
  "<operator> /"
  "<integer> 2"
  "<punctuation> )"
  "<keyword> endif"
  "<identifier> SQRTSPLIT"
  "<punctuation> ("
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> low"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> high"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> mid"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> LE"
  "<punctuation> ("
  "<identifier> mid"
  "<operator> *"
  "<identifier> mid"
  "<separator> ,"
  "<identifier> n"
  "<punctuation> )"
  "<keyword> then"
  "<identifier> SQRTSEARCH"
  "<punctuation> ("
  "<identifier> n"
  "<separator> ,"
  "<identifier> mid"
  "<separator> ,"
  "<identifier> high"
  "<punctuation> )"
  "<keyword> else"
  "<identifier> SQRTSEARCH"
  "<punctuation> ("
  "<identifier> n"
  "<separator> ,"
  "<identifier> low"
  "<separator> ,"
  "<identifier> mid"
  "<punctuation> )"
  "<keyword> endif"))

(define klein/sieve-output '("<keyword> main"
  "<punctuation> ("
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<identifier> sieveAt"
  "<punctuation> ("
  "<integer> 2"
  "<separator> ,"
  "<identifier> n"
  "<punctuation> )"
  "<identifier> sieveAt"
  "<punctuation> ("
  "<identifier> current"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> max"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> if"
  "<identifier> max"
  "<operator> <"
  "<identifier> current"
  "<keyword> then"
  "<keyword> true"
  "<keyword> else"
  "<identifier> doSieveAt"
  "<punctuation> ("
  "<identifier> current"
  "<separator> ,"
  "<identifier> max"
  "<punctuation> )"
  "<keyword> endif"
  "<identifier> doSieveAt"
  "<punctuation> ("
  "<identifier> current"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> max"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> print"
  "<punctuation> ("
  "<keyword> if"
  "<identifier> isPrime"
  "<punctuation> ("
  "<identifier> current"
  "<punctuation> )"
  "<keyword> then"
  "<identifier> current"
  "<keyword> else"
  "<integer> 0"
  "<keyword> endif"
  "<punctuation> )"
  "<identifier> sieveAt"
  "<punctuation> ("
  "<identifier> current"
  "<operator> +"
  "<integer> 1"
  "<separator> ,"
  "<identifier> max"
  "<punctuation> )"
  "<identifier> isPrime"
  "<punctuation> ("
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> not"
  "<identifier> hasDivisorFrom"
  "<punctuation> ("
  "<integer> 2"
  "<separator> ,"
  "<identifier> n"
  "<punctuation> )"
  "<identifier> hasDivisorFrom"
  "<punctuation> ("
  "<identifier> i"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> n"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<keyword> if"
  "<identifier> i"
  "<operator> <"
  "<identifier> n"
  "<keyword> then"
  "<identifier> divides"
  "<punctuation> ("
  "<identifier> i"
  "<separator> ,"
  "<identifier> n"
  "<punctuation> )"
  "<keyword> or"
  "<identifier> hasDivisorFrom"
  "<punctuation> ("
  "<identifier> i"
  "<operator> +"
  "<integer> 1"
  "<separator> ,"
  "<identifier> n"
  "<punctuation> )"
  "<keyword> else"
  "<keyword> false"
  "<keyword> endif"
  "<identifier> divides"
  "<punctuation> ("
  "<identifier> a"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> b"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> boolean"
  "<identifier> rem"
  "<punctuation> ("
  "<identifier> b"
  "<separator> ,"
  "<identifier> a"
  "<punctuation> )"
  "<operator> ="
  "<integer> 0"
  "<identifier> rem"
  "<punctuation> ("
  "<identifier> num"
  "<separator> :"
  "<keyword> integer"
  "<separator> ,"
  "<identifier> den"
  "<separator> :"
  "<keyword> integer"
  "<punctuation> )"
  "<separator> :"
  "<keyword> integer"
  "<keyword> if"
  "<identifier> num"
  "<operator> <"
  "<identifier> den"
  "<keyword> then"
  "<identifier> num"
  "<keyword> else"
  "<identifier> rem"
  "<punctuation> ("
  "<identifier> num"
  "<operator> -"
  "<identifier> den"
  "<separator> ,"
  "<identifier> den"
  "<punctuation> )"
  "<keyword> endif"))

  
  