#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 128 0 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 128 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1322 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"require"
0 0 24 3 1 #" "
0 0 20 3 22 #"\"semantic-actions.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 20 3 12 #"\"parser.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"catch-all"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"some-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 10 #"less-than?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 15 #"print/less-than"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 7 #"equals?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 12 #"print/equals"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 9 #"boolean~?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"print/literal"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"or~?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 8 #"print/or"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"if~?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 9 #"print/if~"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"not?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 9 #"print/not"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 15 #"negative-value?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 20 #"print/negative-value"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 14 #"function-call?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 19 #"print/function-call"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 16 #"nonemptyactuals?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 22 #"nonemptyactuals-prime?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"print/actuals"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 11 #"identifier?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 16 #"print/identifier"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 1 #" "
0 0 20 3 12 #"\"identifier\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 4 #"or~?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 8 #"print/or"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 9 #"addition?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 14 #"print/addition"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 12 #"subtraction?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 17 #"print/subtraction"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 9 #"division?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 14 #"print/division"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 15 #"multiplication?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 20 #"print/multiplication"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 5 #"and~?"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 3 #") ("
0 0 14 3 9 #"print/and"
0 0 24 3 1 #" "
0 0 14 3 11 #"some-struct"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 57 #";;;;;;;;;;;;;;;;;;;;;;;;;PROGRAM;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"print/program"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"prog"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 17 #"print/definitions"
0 0 24 3 2 #" ("
0 0 14 3 19 #"program-definitions"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"print/definitions"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 16 3 5 #"defin"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 16 3 4 #"def?"
0 0 24 3 1 #" "
0 0 16 3 5 #"defin"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"print/def"
0 0 24 3 1 #" "
0 0 16 3 5 #"defin"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"print/def"
0 0 24 3 2 #" ("
0 0 16 3 15 #"definitions-def"
0 0 24 3 1 #" "
0 0 16 3 5 #"defin"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 17 #"print/definitions"
0 0 24 3 2 #" ("
0 0 16 3 23 #"definitions-definitions"
0 0 24 3 1 #" "
0 0 16 3 5 #"defin"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 18 3 53 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 18 3 53 #";;;;;;;;;;;;;;;;;;;;;;;;;DEF;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"print/def"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 16 3 4 #"def~"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 16 #"print/identifier"
0 0 24 3 2 #" ("
0 0 16 3 6 #"def-id"
0 0 24 3 1 #" "
0 0 16 3 4 #"def~"
0 0 24 3 2 #") "
0 0 20 3 6 #"\"name\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"print/formal"
0 0 24 3 2 #" ("
0 0 16 3 11 #"def-formals"
0 0 24 3 1 #" "
0 0 16 3 4 #"def~"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 10 #"print/type"
0 0 24 3 2 #" ("
0 0 16 3 8 #"def-type"
0 0 24 3 1 #" "
0 0 16 3 4 #"def~"
0 0 24 3 2 #") "
0 0 20 3 9 #"\"returns\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 10 #"print/body"
0 0 24 3 2 #" ("
0 0 16 3 8 #"def-body"
0 0 24 3 1 #" "
0 0 16 3 4 #"def~"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"print/identifier"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"ident"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 16 #"identifier-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"ident"
0 0 24 3 3 #")) "
0 0 20 3 5 #"\")\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"print/nonemptyformals"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"nonempform"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"formal?"
0 0 24 3 1 #" "
0 0 14 3 10 #"nonempform"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"print/formal"
0 0 24 3 1 #" "
0 0 14 3 10 #"nonempform"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 14 #"\"parameters\\n\""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 12 #"print/formal"
0 0 24 3 2 #" ("
0 0 14 3 22 #"nonemptyformals-formal"
0 0 24 3 1 #" "
0 0 14 3 10 #"nonempform"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 21 #"print/nonemptyformals"
0 0 24 3 2 #" ("
0 0 14 3 31 #"nonemptyformals-nonemptyformals"
0 0 24 3 1 #" "
0 0 14 3 10 #"nonempform"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"print/formal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"form"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 16 #"nonemptyformals?"
0 0 24 3 1 #" "
0 0 14 3 4 #"form"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 21 #"print/nonemptyformals"
0 0 24 3 1 #" "
0 0 14 3 4 #"form"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 16 #"print/identifier"
0 0 24 3 2 #" ("
0 0 14 3 9 #"formal-id"
0 0 24 3 1 #" "
0 0 14 3 4 #"form"
0 0 24 3 2 #") "
0 0 20 3 16 #"\"    identifier\""
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 10 #"print/type"
0 0 24 3 2 #" ("
0 0 14 3 11 #"formal-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"form"
0 0 24 3 2 #") "
0 0 20 3 14 #"\"        type\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"print/type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"type~"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 20 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 10 #"type-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"type~"
0 0 24 3 3 #")) "
0 0 20 3 5 #"\")\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"print/body"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"bod"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 11 #"print-body?"
0 0 24 3 1 #" "
0 0 14 3 3 #"bod"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 12 #"\"body\\n    \""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 12 #"print/print~"
0 0 24 3 2 #" ("
0 0 14 3 21 #"print-body-print-expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"bod"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                            "
0 0 20 3 4 #"\"\\n\""
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"print/body"
0 0 24 3 2 #" ("
0 0 14 3 15 #"print-body-expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"bod"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 5 #"body?"
0 0 24 3 1 #" "
0 0 14 3 3 #"bod"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 12 #"\"body\\n    \""
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 10 #"print/expr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"body-expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"bod"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"error"
0 0 20 3 8 #" - body\""
0 0 24 3 1 #" "
0 0 14 3 3 #"bod"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"print/print~"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"prnt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 13 #"\"print\\n    \""
0 0 24 3 2 #" ("
0 0 14 3 10 #"print/expr"
0 0 24 3 2 #" ("
0 0 14 3 11 #"print~-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"prnt"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 18 3 54 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 18 3 54 #";;;;;;;;;;;;;;;;;;;;;;;;;EXPR;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"print/expr"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"catch-all"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 20 3 14 #"\"error - expr\""
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"print/less-than"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"less"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 17 #"\"less-than\\n    \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 17 #"print/simple-expr"
0 0 24 3 2 #" ("
0 0 14 3 14 #"less-than-left"
0 0 24 3 1 #" "
0 0 14 3 4 #"less"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 15 #"\"\\n    <\\n    \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 17 #"print/simple-expr"
0 0 24 3 2 #" ("
0 0 14 3 15 #"less-than-right"
0 0 24 3 1 #" "
0 0 14 3 4 #"less"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 4 #"\"\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"print/equals"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"eq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 14 #"\"equals\\n    \""
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 17 #"print/simple-expr"
0 0 24 3 2 #" ("
0 0 14 3 11 #"equals-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"eq"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 9 #"\"\\n    =\""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 17 #"print/simple-expr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"equals-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"eq"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 4 #"\"\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 18 3 59
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 18 3 59
#";;;;;;;;;;;;;;;;;;;;;;;;;SIMP-EXPR;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"print/simple-expr"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"simp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"catch-all"
0 0 24 3 1 #" "
0 0 14 3 4 #"simp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"error"
0 0 20 3 1 #" "
0 0 20 3 1 #"-"
0 0 20 3 12 #" simple-expr"
0 0 20 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"simp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"print/addition"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"addi"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 16 #"\"addition\\n    \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 10 #"print/term"
0 0 24 3 2 #" ("
0 0 14 3 13 #"addition-left"
0 0 24 3 1 #" "
0 0 14 3 4 #"addi"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 15 #"\"\\n    +\\n    \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 10 #"print/term"
0 0 24 3 2 #" ("
0 0 14 3 14 #"addition-right"
0 0 24 3 1 #" "
0 0 14 3 4 #"addi"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 4 #"\"\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"print/subtraction"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sub"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 19 #"\"subtraction\\n    \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 10 #"print/term"
0 0 24 3 2 #" ("
0 0 14 3 16 #"subtraction-left"
0 0 24 3 1 #" "
0 0 14 3 3 #"sub"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 15 #"\"\\n    -\\n    \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 10 #"print/term"
0 0 24 3 2 #" ("
0 0 14 3 17 #"subtraction-right"
0 0 24 3 1 #" "
0 0 14 3 3 #"sub"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 4 #"\"\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"print/or"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"or~"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 25 #"\"or_expression\\n        \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 10 #"print/term"
0 0 24 3 2 #" ("
0 0 14 3 8 #"or~-left"
0 0 24 3 1 #" "
0 0 14 3 3 #"or~"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 24 #"\"\\n        or\\n        \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 10 #"print/term"
0 0 24 3 2 #" ("
0 0 14 3 9 #"or~-right"
0 0 24 3 1 #" "
0 0 14 3 3 #"or~"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 4 #"\"\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 18 3 54 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 18 3 54 #";;;;;;;;;;;;;;;;;;;;;;;;;TERM;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"print/term"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"catch-all"
0 0 24 3 1 #" "
0 0 14 3 3 #"ter"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"error"
0 0 20 3 1 #" "
0 0 20 3 1 #"-"
0 0 20 3 5 #" term"
0 0 20 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 3 #"ter"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"print/multiplication"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"multi"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 22 #"\"multiplication\\n    \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"print/factor"
0 0 24 3 2 #" ("
0 0 14 3 19 #"multiplication-left"
0 0 24 3 1 #" "
0 0 14 3 5 #"multi"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 11 #"\"\\n    *\\n\""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"print/factor"
0 0 24 3 2 #" ("
0 0 14 3 20 #"multiplication-right"
0 0 24 3 1 #" "
0 0 14 3 5 #"multi"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 4 #"\"\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"print/division"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"div"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 16 #"\"division\\n    \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"print/factor"
0 0 24 3 2 #" ("
0 0 14 3 13 #"division-left"
0 0 24 3 1 #" "
0 0 14 3 3 #"div"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 15 #"\"\\n    /\\n    \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"print/factor"
0 0 24 3 2 #" ("
0 0 14 3 14 #"division-right"
0 0 24 3 1 #" "
0 0 14 3 3 #"div"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 4 #"\"\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"print/and"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"&"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 11 #"\"and\\n    \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"print/factor"
0 0 24 3 2 #" ("
0 0 14 3 9 #"and~-left"
0 0 24 3 1 #" "
0 0 14 3 1 #"&"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 17 #"\"\\n    and\\n    \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"print/factor"
0 0 24 3 2 #" ("
0 0 14 3 10 #"and~-right"
0 0 24 3 1 #" "
0 0 14 3 1 #"&"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 4 #"\"\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 18 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 18 3 56 #";;;;;;;;;;;;;;;;;;;;;;;;;FACTOR;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"print/factor"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"fact"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"catch-all"
0 0 24 3 1 #" "
0 0 14 3 4 #"fact"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 20 3 16 #"\"error - factor\""
0 0 24 3 1 #" "
0 0 14 3 4 #"fact"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"print/not"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"not~"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 7 #"\"not\\n\""
0 0 24 3 1 #" "
0 0 20 3 6 #"\"    \""
0 0 24 3 2 #" ("
0 0 14 3 12 #"print/factor"
0 0 24 3 2 #" ("
0 0 14 3 9 #"not-value"
0 0 24 3 1 #" "
0 0 14 3 4 #"not~"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"print/function-call"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"func-call"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 17 #"\"function_call\\n\""
0 0 24 3 2 #" ("
0 0 14 3 16 #"print/identifier"
0 0 24 3 2 #" ("
0 0 14 3 18 #"function-call-name"
0 0 24 3 1 #" "
0 0 14 3 9 #"func-call"
0 0 24 3 2 #") "
0 0 20 3 24 #"\"         function_name\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 8 #"\"\\n    \""
0 0 24 3 2 #" ("
0 0 14 3 13 #"print/actuals"
0 0 24 3 2 #" ("
0 0 14 3 21 #"function-call-actuals"
0 0 24 3 1 #" "
0 0 14 3 9 #"func-call"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"print/literal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"boolean~?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 10 #"\"literal(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 14 #"boolean~-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"lit"
0 0 24 3 3 #")) "
0 0 20 3 3 #"\")\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 10 #"\"literal(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 12 #"number-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"lit"
0 0 24 3 3 #")) "
0 0 20 3 3 #"\")\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"print/negative-value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"neg-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 16 #"\"negative\\n    \""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"print/factor"
0 0 24 3 2 #" ("
0 0 14 3 14 #"negative-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"neg-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 4 #"\"\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"print/if~"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iffy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 19 #"if_expression\\n    "
0 0 20 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 1 #"\""
0 0 20 3 8 #"if\\n    "
0 0 20 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 10 #"print/expr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"if~-test"
0 0 24 3 1 #" "
0 0 14 3 4 #"iffy"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 1 #"\""
0 0 20 3 10 #"then\\n    "
0 0 20 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 10 #"print/expr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"if~-then"
0 0 24 3 1 #" "
0 0 14 3 4 #"iffy"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 1 #"\""
0 0 20 3 10 #"else\\n    "
0 0 20 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 10 #"print/expr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"if~-else"
0 0 24 3 1 #" "
0 0 14 3 4 #"iffy"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 20 3 3 #"\"\\n"
0 0 20 3 1 #"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"print/actuals"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"acts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 16 #"nonemptyactuals?"
0 0 24 3 1 #" "
0 0 14 3 4 #"acts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 19 #"\"actuals\\n        \""
0 0 24 3 2 #" ("
0 0 14 3 10 #"print/expr"
0 0 24 3 2 #" ("
0 0 14 3 20 #"nonemptyactuals-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"acts"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 22 #"nonemptyactuals-prime?"
0 0 24 3 1 #" "
0 0 14 3 4 #"acts"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 10 #"print/expr"
0 0 24 3 2 #" ("
0 0 14 3 26 #"nonemptyactuals-prime-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"acts"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 20 3 12 #"\"\\n        \""
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 13 #"print/actuals"
0 0 24 3 2 #" ("
0 0 14 3 37 #"nonemptyactuals-prime-nonemptyactuals"
0 0 24 3 1 #" "
0 0 14 3 4 #"acts"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        ))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 14 #"empty-actuals?"
0 0 24 3 1 #" "
0 0 14 3 4 #"acts"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 20 3 13 #"\"actuals()\\n\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"catch-all"
0 0 24 3 1 #" "
0 0 14 3 4 #"acts"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 20 3 17 #"\"error - actuals\""
0 0 24 3 1 #" "
0 0 14 3 4 #"acts"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 18 3 86
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 18 3 86
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"printf"
0 0 24 3 2 #" ("
0 0 14 3 13 #"print/program"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parser"
0 0 24 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 34 #"klein-programs/circular-prime.kln\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0           0
